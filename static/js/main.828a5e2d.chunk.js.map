{"version":3,"sources":["getPoints.js","App.js","reportWebVitals.js","index.js"],"names":["getPoints","props","result","1","2","3","4","5","6","i","arr","points","k","App","useState","finalPoints","setFinalPoints","totalPoints","setTotalPoints","style","textAlign","onRoll","value","size","triggers","getAllPoints","p","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAwCeA,EAxCG,SAACC,GASlB,IARA,IAAMC,EAAS,CACdC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,GAEKC,EAAI,EAAGA,EAAI,EAAGA,IACtBP,EAAOD,EAAMS,IAAID,MAIlB,IAFA,IAAIE,EAAS,EAEJC,EAAI,EAAGA,EAAI,EAAGA,IAClBV,EAAOU,IAAM,GAEfD,GADS,IAANC,EACO,IAEI,IAAJA,EAEXV,EAAOU,IAAM,EACH,IAANA,IACHD,GAAsB,IAAZT,EAAOU,IAER,IAANA,IACHD,GAAsB,GAAZT,EAAOU,MAGR,IAANA,IACHD,GAAsB,IAAZT,EAAOU,IAER,IAANA,IACHD,GAAsB,GAAZT,EAAOU,KAIpB,OAAOD,G,OC6BOE,MA9Df,WAAgB,IAAD,EACwBC,mBAAS,GADjC,mBACPC,EADO,KACMC,EADN,OAEwBF,mBAAS,GAFjC,mBAEPG,EAFO,KAEMC,EAFN,KAIVR,EAAM,GAWV,OACC,sBAAKS,MAAO,CAAEC,UAAW,UAAzB,UACC,0EACA,gCACC,cAAC,IAAD,CACCC,OAAQ,SAACC,GACRZ,EAAI,GAAKY,GAEVC,KAAM,IACNC,SAAU,CAAC,WAEZ,cAAC,IAAD,CACCH,OAAQ,SAACC,GACRZ,EAAI,GAAKY,GAEVC,KAAM,IACNC,SAAU,CAAC,WAEZ,cAAC,IAAD,CACCH,OAAQ,SAACC,GACRZ,EAAI,GAAKY,GAEVC,KAAM,IACNC,SAAU,CAAC,WAEZ,cAAC,IAAD,CACCH,OAAQ,SAACC,GACRZ,EAAI,GAAKY,GAEVC,KAAM,IACNC,SAAU,CAAC,WAEZ,cAAC,IAAD,CACCH,OAAQ,SAACC,GACRZ,EAAI,GAAKY,EA1CI,SAACZ,GAClB,IAAIC,EAASc,EAAa,CAAEf,QAC5BQ,GAAe,SAACQ,GAAD,OAAOA,EAAIf,KAC1BK,EAAeL,GAwCXX,CAAUU,IAEXa,KAAM,IACNC,SAAU,CAAC,cAGb,oDAAuBT,KACvB,gDAAmBE,SCjDPU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.828a5e2d.chunk.js","sourcesContent":["const getPoints = (props) => {\n\tconst result = {\n\t\t1: 0,\n\t\t2: 0,\n\t\t3: 0,\n\t\t4: 0,\n\t\t5: 0,\n\t\t6: 0,\n\t};\n\tfor (let i = 0; i < 6; i++) {\n\t\tresult[props.arr[i]]++;\n\t}\n\tlet points = 0;\n\n\tfor (let k = 1; k < 7; k++) {\n\t\tif (result[k] >= 3) {\n\t\t\tif (k === 1) {\n\t\t\t\tpoints += 1000;\n\t\t\t} else {\n\t\t\t\tpoints += k * 100;\n\t\t\t}\n\t\t\tresult[k] -= 3;\n\t\t\tif (k === 1) {\n\t\t\t\tpoints += result[k] * 100;\n\t\t\t}\n\t\t\tif (k === 5) {\n\t\t\t\tpoints += result[k] * 50;\n\t\t\t}\n\t\t} else {\n\t\t\tif (k === 1) {\n\t\t\t\tpoints += result[k] * 100;\n\t\t\t}\n\t\t\tif (k === 5) {\n\t\t\t\tpoints += result[k] * 50;\n\t\t\t}\n\t\t}\n\t}\n\treturn points;\n};\n\nexport default getPoints;\n","import React, { useState } from \"react\";\nimport Dice from \"react-dice-roll\";\nimport getAllPoints from \"./getPoints\";\n\nfunction App() {\n\tconst [finalPoints, setFinalPoints] = useState(0);\n\tconst [totalPoints, setTotalPoints] = useState(0);\n\n\tlet arr = [];\n\n\t// Solution of the Main Requirement is in this function:\n\tconst getPoints = (arr) => {\n\t\tlet points = getAllPoints({ arr });\n\t\tsetTotalPoints((p) => p + points);\n\t\tsetFinalPoints(points);\n\t};\n\n\t// console.log(getPoints([6, 6, 6, 6, 6, 6]));\n\n\treturn (\n\t\t<div style={{ textAlign: \"center\" }}>\n\t\t\t<h1>Press Enter on your keyboard to Roll All</h1>\n\t\t\t<div>\n\t\t\t\t<Dice\n\t\t\t\t\tonRoll={(value) => {\n\t\t\t\t\t\tarr[0] = value;\n\t\t\t\t\t}}\n\t\t\t\t\tsize={100}\n\t\t\t\t\ttriggers={[\"Enter\"]}\n\t\t\t\t/>\n\t\t\t\t<Dice\n\t\t\t\t\tonRoll={(value) => {\n\t\t\t\t\t\tarr[1] = value;\n\t\t\t\t\t}}\n\t\t\t\t\tsize={100}\n\t\t\t\t\ttriggers={[\"Enter\"]}\n\t\t\t\t/>\n\t\t\t\t<Dice\n\t\t\t\t\tonRoll={(value) => {\n\t\t\t\t\t\tarr[2] = value;\n\t\t\t\t\t}}\n\t\t\t\t\tsize={100}\n\t\t\t\t\ttriggers={[\"Enter\"]}\n\t\t\t\t/>\n\t\t\t\t<Dice\n\t\t\t\t\tonRoll={(value) => {\n\t\t\t\t\t\tarr[3] = value;\n\t\t\t\t\t}}\n\t\t\t\t\tsize={100}\n\t\t\t\t\ttriggers={[\"Enter\"]}\n\t\t\t\t/>\n\t\t\t\t<Dice\n\t\t\t\t\tonRoll={(value) => {\n\t\t\t\t\t\tarr[4] = value;\n\t\t\t\t\t\tgetPoints(arr);\n\t\t\t\t\t}}\n\t\t\t\t\tsize={100}\n\t\t\t\t\ttriggers={[\"Enter\"]}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<h3>You final points: {finalPoints}</h3>\n\t\t\t<h3>Total Points: {totalPoints}</h3>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}